01/01/2014 12:12:12

empdal

  public int AddEmployee(empbo objEmployeeBO)
        {
            tbl_omr_g6_sro empsro = new tbl_omr_g6_sro();

          
                empsro.BankAcc = objEmployeeBO.BankAcc;
                empsro.IFSC_code = objEmployeeBO.IFSC_code;
                empsro.Address1 = objEmployeeBO.Address1;
                empsro.Address2 = objEmployeeBO.Address2;
                empsro.Area = objEmployeeBO.Area;
                empsro.District = objEmployeeBO.District;
                empsro.State = objEmployeeBO.State;
        
                empsro.Country = objEmployeeBO.Country;
                empsro.Bankname = objEmployeeBO.Bankname;
                empsro.Branch = objEmployeeBO.Branch;
                empsro.Created_by = objEmployeeBO.Created_by;
                empsro.Modified_by = objEmployeeBO.Modified_by;
                empsro.status = objEmployeeBO.status;
                empsro.Created_date = objEmployeeBO.Created_date;
                empsro.Modified_date = objEmployeeBO.Modified_date;
            using (var dbContext = new CHN12_MMS73_Group6Entities1()) 
            {

                dbContext.tbl_omr_g6_sro.Add(empsro);
                dbContext.SaveChanges();
            }
            
           
            return empsro.SRO;
        }


//empbll
  public class empbll
    {
        public int AddEmployee(empbo objEmployeeBO)
        {
            empdal objEmployeeDAL = new empdal();

            return objEmployeeDAL.AddEmployee(objEmployeeBO);
        }
    }



//controller
    public class EmpController : Controller
    {
        // GET: Emp
        public ActionResult Index()
        {
            return View();
        }
        [HttpGet]
        public ActionResult AddEmployee()
        {
            ViewBag.Title = "Add Employee";
            ViewBag.Message = "";

        empModels objEmployeeViewModel = new empModels();
      

            return View("AddEmployee", objEmployeeViewModel);
        }

        [HttpPost]
        public ActionResult AddEmployee(string Create)
        {
            System.Diagnostics.Trace.TraceInformation("Hello..");

            ViewBag.Title = "Add Employee";

            if (ModelState.IsValid)
            {
              empbo empsro = new empbo();
                empsro.BankAcc =Convert.ToInt32(Request.Form["BankAcc"]);
                empsro.IFSC_code =Convert.ToInt32(Request.Form["IFSC_code"]);
                empsro.Address1 = Request.Form["Address1"];
                empsro.Address2 = Request.Form["Address2"];
                empsro.Area = Request.Form["Area"];
                empsro.District = Request.Form["District"];
                empsro.State = Request.Form["State"];

                empsro.Country = Request.Form["Country"];
                empsro.Bankname = Request.Form["Bankname"];
                empsro.Branch = Request.Form["Branch"];
                empsro.Created_by = Request.Form["Created_by"];
                empsro.Modified_by = Request.Form["Modified_by"];
                empsro.status = Request.Form["status"];
                empsro.Created_date = Convert.ToDateTime(Request.Form["Created_date"]);
                empsro.Modified_date =Convert.ToDateTime(Request.Form["Modified_date"]);
              

               

                empModels objEmployeeViewModel = new empModels();
            

             empbll objEmployeeBLL = new empbll();
                int intEmployeeId = objEmployeeBLL.AddEmployee(empsro);

                if (intEmployeeId > 0)
                {
                    ViewBag.Message = String.Format("Success: Employee added. Employee Id is {0}", intEmployeeId);
                    return View("SuccessEmployee");
                }
                else
                {
                    ViewBag.Message = "Error while adding employee. Please try again";

                
                    return View("AddEmployee", objEmployeeViewModel);
                }
            }
            else
            {
                ViewBag.Message = "Error while adding employee. Please try again";

                empModels objEmployeeViewModel = new empModels();
        

                return View("AddEmployee", objEmployeeViewModel);
            }
        }
    }




//model


    public class empModels
    {
        public int sro { get; set; }
        // public DataSet StoreAllData { get; set; }
        [Required(ErrorMessage = "Please Enter address")]
        [Display(Name = "Enter Address")]
        [StringLength(50, MinimumLength = 3, ErrorMessage = "address must be between 3 and 50 characters!")]
        public string Address1 { get; set; }

        [Required(ErrorMessage = "Please Enter address")]
        [Display(Name = "Enter Alternative Address")]

        public string Address2 { get; set; }


        [Required(ErrorMessage = "Please Enter area")]
        [Display(Name = "Enter Area")]

        public string Area { get; set; }

        [Required(ErrorMessage = "Please Enter District")]
        [Display(Name = "Enter District")]

        public string District { get; set; }


        [Required(ErrorMessage = "Please Enter State")]
        [Display(Name = "Enter State")]

        public string State { get; set; }

        [Required(ErrorMessage = "Please Enter Country")]
        [Display(Name = "Enter Country")]
        public string Country { get; set; }

        [Required(ErrorMessage = "Please Enter Bank name")]
        [Display(Name = "Enter Bank Name")]
        public string Bankname { get; set; }

        [Required(ErrorMessage = "Please Enter Branch")]
        [Display(Name = "Enter Branch")]
        public string Branch { get; set; }

        [Required(ErrorMessage = "Please Enter Created by")]
        [Display(Name = "Enter Created by")]
        public string Created_by { get; set; }

        [Required(ErrorMessage = "Please Enter Modified by")]
        [Display(Name = "Enter Modified by")]
        public string Modified_by { get; set; }




        [Required(ErrorMessage = "Please Enter account no")]
        [Display(Name = "Enter Account no")]
        [MaxLength(16, ErrorMessage = "Exceeding Limit")]
        public int BankAcc { get; set; }



        [Required(ErrorMessage = "Please Enter IFSC")]
        [Display(Name = "Enter IFSC")]
        [MaxLength(16, ErrorMessage = "Exceeding Limit")]
        public int IFSC_code { get; set; }

        [Required(ErrorMessage = "Please Enter status")]
        [Display(Name = "Enter status")]
        public string status { get; set; }

        [Required(ErrorMessage = "Please Enter created date")]
        [Display(Name = "Enter Created Date ")]
        public DateTime Created_date { get; set; }


        [Required(ErrorMessage = "Please Enter modified date")]
        [Display(Name = "Enter Modified Date ")]
        public DateTime Modified_date { get; set; }

    }


//view


@model WebApplication4.Models.empModels
@{
    ViewBag.Title = "AddEmployee";
}


<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>@ViewBag.Title</title>
</head>
<body>
    @Scripts.Render("~/bundles/jquery")
    @Scripts.Render("~/bundles/jqueryval")

    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()

  
            <br />
            <h4>@ViewBag.Title</h4>
            <hr />
            <small><font color="Blue">@ViewBag.Message</font></small>
         
        <div>
            @Html.LabelFor(model => model.BankAcc)

            @Html.TextBoxFor(model => model.BankAcc)
            @Html.ValidationMessageFor(model => model.BankAcc)
        </div> 
           <div>
        @Html.LabelFor(model => model.Address1)

        @Html.TextBoxFor(model => model.Address1)
        @Html.ValidationMessageFor(model => model.Address1)
               </div><div>

    @Html.LabelFor(model => model.IFSC_code)

    @Html.TextBoxFor(model => model.IFSC_code)
    @Html.ValidationMessageFor(model => model.IFSC_code)
</div>
    <div>

        @Html.LabelFor(model => model.Address2)

        @Html.TextBoxFor(model => model.Address2)
        @Html.ValidationMessageFor(model => model.Address2)
    </div>
    <div>
        @Html.LabelFor(model => model.Area)

        @Html.TextBoxFor(model => model.Area)
        @Html.ValidationMessageFor(model => model.Area)
    </div>
    <div>
        @Html.LabelFor(model => model.District)

        @Html.TextBoxFor(model => model.District)
        @Html.ValidationMessageFor(model => model.District)
    </div>
    <div>
        @Html.LabelFor(model => model.State)

        @Html.TextBoxFor(model => model.State)
        @Html.ValidationMessageFor(model => model.State)
    </div>
    <div>
        @Html.LabelFor(model => model.Country)

        @Html.TextBoxFor(model => model.Country)
        @Html.ValidationMessageFor(model => model.Country)
    </div>
    <div>
        @Html.LabelFor(model => model.Bankname)

        @Html.TextBoxFor(model => model.Bankname)
        @Html.ValidationMessageFor(model => model.Bankname)
    </div>
    <div>
        @Html.LabelFor(model => model.Branch)

        @Html.TextBoxFor(model => model.Branch)
        @Html.ValidationMessageFor(model => model.Branch)
    </div>
    <div>
        @Html.LabelFor(model => model.Created_by)

        @Html.TextBoxFor(model => model.Created_by)
        @Html.ValidationMessageFor(model => model.Created_by)
    </div>
    <div>
        @Html.LabelFor(model => model.Modified_by)

        @Html.TextBoxFor(model => model.Modified_by)
        @Html.ValidationMessageFor(model => model.Modified_by)
    </div>
    <div>

        @Html.LabelFor(model => model.status)

        @Html.TextBoxFor(model => model.status)
        @Html.ValidationMessageFor(model => model.status)
    </div>
    <div>
        @Html.LabelFor(model => model.Created_date)

        @Html.TextBoxFor(model => model.Created_date)
        @Html.ValidationMessageFor(model => model.Created_date)
    </div>
    <div>

        @Html.LabelFor(model => model.Modified_date)

        @Html.TextBoxFor(model => model.Modified_date)
        @Html.ValidationMessageFor(model => model.Modified_date)
    </div>
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" id="Add" name="add" />
            </div>

    }

          
</body>
</html>



